/* Generated By:JavaCC: Do not edit this line. MoazConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MoazConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PLUS = 5;
  /** RegularExpression Id. */
  int SUB = 6;
  /** RegularExpression Id. */
  int MULTIPLY = 7;
  /** RegularExpression Id. */
  int DIV = 8;
  /** RegularExpression Id. */
  int LOG = 9;
  /** RegularExpression Id. */
  int SIN = 10;
  /** RegularExpression Id. */
  int COS = 11;
  /** RegularExpression Id. */
  int TAN = 12;
  /** RegularExpression Id. */
  int ABS = 13;
  /** RegularExpression Id. */
  int POWER = 14;
  /** RegularExpression Id. */
  int Fact = 15;
  /** RegularExpression Id. */
  int ALLASSIGN = 16;
  /** RegularExpression Id. */
  int ASSIGN = 17;
  /** RegularExpression Id. */
  int SEMI = 18;
  /** RegularExpression Id. */
  int COLON = 19;
  /** RegularExpression Id. */
  int IF = 20;
  /** RegularExpression Id. */
  int ELSE = 21;
  /** RegularExpression Id. */
  int FOR = 22;
  /** RegularExpression Id. */
  int ARROW = 23;
  /** RegularExpression Id. */
  int WHILE = 24;
  /** RegularExpression Id. */
  int READ = 25;
  /** RegularExpression Id. */
  int PRINT = 26;
  /** RegularExpression Id. */
  int VAR_ = 27;
  /** RegularExpression Id. */
  int Break = 28;
  /** RegularExpression Id. */
  int Continue = 29;
  /** RegularExpression Id. */
  int LP = 30;
  /** RegularExpression Id. */
  int RP = 31;
  /** RegularExpression Id. */
  int LB = 32;
  /** RegularExpression Id. */
  int RB = 33;
  /** RegularExpression Id. */
  int VAR = 34;
  /** RegularExpression Id. */
  int INCR = 35;
  /** RegularExpression Id. */
  int DECR = 36;
  /** RegularExpression Id. */
  int PLUSASSIGN = 37;
  /** RegularExpression Id. */
  int MINUSASSIGN = 38;
  /** RegularExpression Id. */
  int MULTASSIGN = 39;
  /** RegularExpression Id. */
  int DIVASSIGN = 40;
  /** RegularExpression Id. */
  int REMASSIGN = 41;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 42;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 43;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 44;
  /** RegularExpression Id. */
  int EXPONENT = 45;
  /** RegularExpression Id. */
  int STRING_LITERAL = 46;
  /** RegularExpression Id. */
  int ESCAPE_SEQUENCE = 47;
  /** RegularExpression Id. */
  int BOOLEAN_LITERAL = 48;
  /** RegularExpression Id. */
  int NULL_LITERAL = 49;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"log\"",
    "\"sin\"",
    "\"cos\"",
    "\"tan\"",
    "\"abs\"",
    "\"**\"",
    "\"!\"",
    "<ALLASSIGN>",
    "\"=\"",
    "\";\"",
    "\":\"",
    "\"if\"",
    "\"else\"",
    "\"for\"",
    "\"->\"",
    "\"while\"",
    "\">>\"",
    "<PRINT>",
    "<VAR_>",
    "\"break\"",
    "\"continue\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "<VAR>",
    "\"++\"",
    "\"--\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<ESCAPE_SEQUENCE>",
    "<BOOLEAN_LITERAL>",
    "\"null\"",
    "\",\"",
    "\"?\"",
    "\"||\"",
    "\"&&\"",
    "\"|\"",
    "\"^\"",
    "\"&\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"<<\"",
    "\">>>\"",
    "\"%\"",
  };

}
