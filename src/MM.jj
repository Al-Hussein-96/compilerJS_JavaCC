/*
/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+

 */
options
{
  static = true;
}

PARSER_BEGIN(Moaz)
import nodes.*;

public class Moaz
{
  public static void main(String args []) throws ParseException
  {
    Moaz parser = new Moaz(System.in);
    SyntaxTreeNode n = start();
    n.execute(new Context());
  }
}

PARSER_END(Moaz)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
  < PLUS : "+" >
| < SUB : "-" >
| < MULTIPLY : "*" >
| < DIV : "/" >
| < LOG : "log" >
| < SIN : "sin" >
| < COS : "cos" >
| < TAN : "tan" >
| < ABS : "abs" >
| < POWER : "**" >
| < Fact : "!" >
//| < LOGICAL : "<" | ">"| "<="| ">="| "=="| "!=" >
| < ALLASSIGN :"+="| "-="| "*="| "/=">   
| < ASSIGN : "=" >
| < SEMI : ";" >
| < COLON : ":" >
| < IF : "if" >
| < ELSE : "else" >
| < FOR : "for" >
| < ARROW : "->" >
| < WHILE : "while" >
| < READ : ">>" >
| < PRINT : "console.log"| "print" >
| < VAR_ : "var" | "let">
| < Break : "break" >
| < Continue : "continue" >
| < Switch : "switch" >
| < Case : "case" >
| < Default_ : "default" >
}

TOKEN :
{
  < LP : "(" >
| < RP : ")" >
| < LB : "{" >
| < RB : "}" >                                                                                                                                                                                                                                                                                                                                                                                                     
| < VAR :( [ "a"-"z" ] | [ "A"-"Z" ]| [ "$" ]| [ "_" ] )([ "a"-"z" ]| [ "A"-"Z" ] | [ "0"-"9" ]| [ "$" ]| [ "_" ])* >
}

TOKEN :
{
   < INCR : "++" >
 |  <DECR : "--" >
 |  <PLUSASSIGN : "+=">
 |  <MINUSASSIGN: "-=">
 |  <MULTASSIGN: "*=">
 |  <DIVASSIGN:	"/=">
 |  <REMASSIGN:	"%=">

}

TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL: <DECIMAL_LITERAL> >
| < #DECIMAL_LITERAL: (["1"-"9"] (["0"-"9"])*) | "0"  >
| < FLOATING_POINT_LITERAL: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? | "." (["0"-"9"])+ (<EXPONENT>)? | (["0"-"9"])+ (<EXPONENT>)? >
| < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
| < STRING_LITERAL:
	"\"" ( (~["\"","\\","\n","\r"])
	| <ESCAPE_SEQUENCE> )* "\""
	| "'" (   (~["'","\\","\n","\r"])
	| <ESCAPE_SEQUENCE> )* "'" >
| < #ESCAPE_SEQUENCE:
      "\\"
        ( ["n","t","b","r","f","\\","'","\""] | ["0"-"7"] ( ["0"-"7"] )?
        | ["0"-"3"] ["0"-"7"] ["0"-"7"]
        | ["x", "X"] ["0"-"9","a"-"f","A"-"F"] ["0"-"9","a"-"f","A"-"F"]
        )
  >
|
  < BOOLEAN_LITERAL:"true"|"false">
|
  < NULL_LITERAL: "null" >
}



BlockNode start() :
{
  BlockNode b;
}
{
  b = block() 
  < COLON >
  {
    return b;
  }
}

BlockNode block() :
{
  BlockNode b = new BlockNode();
  SyntaxTreeNode n = null;
}
{
  (
    (
      n = SingleOP()
    )
    {
      b.addChild(n);
    }
  )+
  {
    return b;
  }
}

SyntaxTreeNode SingleOP() :
{
  SyntaxTreeNode n;
}
{
  (
   LOOKAHEAD(2) n = Declaration()
  | n = Switch()
  | n = forstmt() 
  | n = whilestmt()
  | n = ifstmt()
  | n = printstmt()
  | n = Break()
  | n = Continue()
  | n = Unary()

  )
  {
    return n;
  }
}


SyntaxTreeNode Unary() :
{
  SyntaxTreeNode n;
}
{
  n = UnaryExpression() < SEMI >
  {
    return n;
  }
}
SyntaxTreeNode Continue() :
{
  ContinueNode n = new ContinueNode();
}
{
  < Continue > < SEMI >
  {
    return n;
  }
}
SyntaxTreeNode Break() :
{
  BreakNode n = new BreakNode();
}
{
  < Break > < SEMI >
  {
    return n;
  }
}

WriteNode printstmt() :
{
  WriteNode res = new WriteNode();
  SyntaxTreeNode n;
}
{
  < PRINT > < LP > n = E() < RP > < SEMI >
  {
    res.addChild(n);
    return res;
  }
}
/*
ConditionNode condition() :
{
  ConditionNode res = new ConditionNode();
  Token t;
  SyntaxTreeNode n1, n2;
}
{
  n1 = E() t = < LOGICAL > n2 = E()
  {
    res.setOperator(t.image);
    res.addChild(n1);
    res.addChild(n2);
    return res;
  }
}
*/
BlockNode Declaration() :
{
	BlockNode b = new BlockNode();
    SyntaxTreeNode n = null;
}
{
    (
  (
    n=assignstmt()
    {
      b.addChild(n);
    }
    ";"
   )
   
| (
    < VAR_ >
    n=Variable()
    {
      b.addChild(n);
    }
    ("," n=Variable()
  	 {
         b.addChild(n);
     }
    )*
    ";"
  )    )
    {
     return b;
    }
}

AssignNode Variable() :
{
    AssignNode res = new AssignNode();
    Token t1 ,t2;
	SyntaxTreeNode n = null;
}
{
	t1=< VAR > ( t2 = < ASSIGN > {res.setOp(t2.image); } n=E() { res.addChild(n); } )?
    {
	    res.setVariable(t1.image);
  	    return res;
    }
}

AssignNode assignstmt() :
{
  AssignNode res = new AssignNode();
  SyntaxTreeNode n;
  Token t1 ,t2;
}
{
  t1 = < VAR > (t2 = < ALLASSIGN > | t2 = < ASSIGN >) n = E() 
  {
    res.setVariable(t1.image);
	res.setOp(t2.image);
    res.addChild(n);
    return res;
  }
}

/////////////////////////////////////// Switch statment ///////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

SyntaxTreeNode Switch() :
{
  SwitchNode n = new SwitchNode();
  SyntaxTreeNode c = null;
  Token t;
}
{
  < Switch > <LP > t = < VAR >   < RP >
  < LB >
  (
    c = Case()
    {
      n.addChild(c);
    }
  )*
  (
    c = Default()
    {
      n.addChild(c);
    }
  )?
  (
    c = Case()
    {
      n.addChild(c);
    }
  )*
  < RB >
  {
    n.setNameVar(t.image);
    return n;
  }
}
 
 
 



SyntaxTreeNode Case() :
{
  CaseNode n = new CaseNode();
  SyntaxTreeNode c = null;
}
{
  < Case > c = E() < COLON >
  {
    n.addChild(c);
  }
  (
    (
      < LB > c = block() < RB >
    | 
     c = block()
    )
    {
      n.addChild(c);
    }
  )
  {
    return n;
  }
}


SyntaxTreeNode Default() :
{
  DefaultNode n = new DefaultNode();
  SyntaxTreeNode c = null;
}
{
  < Default_ > < COLON >
  (
    (
      < LB > c = block() < RB >
    | 
      c = block()
    )
    {
      n.addChild(c);
    }
  )
  {
    return n;
  }
}

/////////////////////////////////////// For statment //////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////

ForNode forstmt() :
{
  ForNode res = new ForNode();
  SyntaxTreeNode c1 = null;
  SyntaxTreeNode c2 = null;
  SyntaxTreeNode c3 = null;
  SyntaxTreeNode c4 = null;
}
{
  (
    < FOR >  < LP > (c1 = Declaration() | < SEMI >) (c2 = E())? < SEMI > (c3 = assignstmt())?  < RP >
    {
      res.addChild(c1);
      res.addChild(c2);
      res.addChild(c3);
    }
    (
      < LB > c4 = block() < RB >
    | 
      c4 = SingleOP()
    )
    {
      res.addChild(c4);
    }
  )
  {
    return res;
  }
}

/////////////////////////////////////// while statment ////////////////////////////////////////
//////////////////////  with one statment after it or multi statment //////////////////////////////
WhileNode whilestmt() :
{
  WhileNode res = new WhileNode();
  SyntaxTreeNode c = null;
}
{
  (
    < WHILE > < LP > c = E() < RP >
    {
      res.addChild(c);
    }
    ( < LB > c = block() < RB > |  c = SingleOP())
    {
      res.addChild(c);
    }
  )
  {
    return res;
  }
}


/////////////////////////////////////// if else statment ////////////////////////////////////////
//////////////////////with one statment after it or multi statment //////////////////////////////
IfNode ifstmt() :
{
  IfNode res = new IfNode();
  SyntaxTreeNode c = null;
}
{
  (
    < IF > < LP > c = E() < RP >
    {
      res.addChild(c);
    }
    (
      < LB > c = block() < RB >
    | 
      c = SingleOP()
    )
    {
      res.addChild(c);
    }
  )
  (
    < ELSE >
    (
      < LB > c = block() < RB >
    | 
      c = SingleOP()
    )
    {
      res.addChild(c);
    }
  )?
  {
    return res;
  }
}


/////////////////////////////////////// Begin mathematical ////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
//ExpressionNode increment():
//{
//  ExpressionNode n1,n2 = null;
//  Token t = null;
//}
//{
//  
//  return n1;
//}

/*
ExpressionNode E() :
{
	Token t;
  ExpressionNode e = null;
  ExpressionNode e2;
}
{
  e=AssignmentExpression()
  (
  	t="," e2=AssignmentExpression()
    														{
                                	e = new ExpressionNode( t, e, e2);
                                }
  )*
                                {
                                  return e;
                                }
}


JSExpression AssignmentExpression() :
{
	Token t;
  ExpressionNode e = null;
  ExpressionNode e2;
}
{
  e=ConditionalExpression()
  (
  	( t="=" | t="&&=" | t="||=" | t="+=" | t="-=" | t="*=" | t="/=" | t="&=" | t="|=" | t="^=" | t="%=" | t="<<=" | t=">>=" | t=">>>=" )
    e2=ConditionalExpression()
    														{
                                	e = new ExpressionNode( t, e, e2);
                                }
  )*
                                {
                                  return e;
                                }
}
*/
ExpressionNode E() :
{
  Token t;
  ExpressionNode e = null;
  ExpressionNode e2;
  ExpressionNode e3;
}
{
  e = OrExpression()
  (
    t = "?" e2 = E() ":" e3 = E()
    {
      e = new ExpressionNode(t.image, e, e2, e3);
    }
  )?
  {
    return e;
  }
}

ExpressionNode OrExpression() :
{
  Token t;
  ExpressionNode e = null;
  ExpressionNode e2;
}
{
  e = AndExpression()
  (
    t = "||" e2 = AndExpression()
    {
      e = new ExpressionNode(t.image, e, e2);
    }
  )*
  {
    return e;
  }
}

ExpressionNode AndExpression() :
{
  Token t;
  ExpressionNode e = null;
  ExpressionNode e2;
}
{
  e = BitwiseOrExpression()
  (
    t = "&&" e2 = BitwiseOrExpression()
    {
      e = new ExpressionNode(t.image, e, e2);
    }
  )*
  {
    return e;
  }
}

ExpressionNode BitwiseOrExpression() :
{
  Token t;
  ExpressionNode e = null;
  ExpressionNode e2;
}
{
  e = BitwiseXorExpression()
  (
    t = "|" e2 = BitwiseXorExpression()
    {
      e = new ExpressionNode(t.image, e, e2);
    }
  )*
  {
    return e;
  }
}

ExpressionNode BitwiseXorExpression() :
{
  Token t;
  ExpressionNode e = null;
  ExpressionNode e2;
}
{
  e = BitwiseAndExpression()
  (
    t = "^" e2 = BitwiseAndExpression()
    {
      e = new ExpressionNode(t.image, e, e2);
    }
  )*
  {
    return e;
  }
}

ExpressionNode BitwiseAndExpression() :
{
  Token t;
  ExpressionNode e = null;
  ExpressionNode e2;
}
{
  e = EqualityExpression()
  (
    t = "&" e2 = EqualityExpression()
    {
      e = new ExpressionNode(t.image, e, e2);
    }
  )*
  {
    return e;
  }
}

ExpressionNode EqualityExpression() :
{
  Token t;
  ExpressionNode e = null;
  ExpressionNode e2;
}
{
  e = RelationalExpression()
  (
    (
      t = "=="
    | t = "!="
    )
    e2 = RelationalExpression()
    {
      e = new ExpressionNode(t.image, e, e2);
    }
  )*
  {
    return e;
  }
}

ExpressionNode RelationalExpression() :
{
  Token t;
  ExpressionNode e = null;
  ExpressionNode e2;
}
{
  e = ShiftExpression()
  (
    (
      t = "<"
    | t = ">"
    | t = "<="
    | t = ">="
    )
    e2 = ShiftExpression()
    {
      e = new ExpressionNode(t.image, e, e2);
    }
  )*
  {
    return e;
  }
}

ExpressionNode ShiftExpression() :
{
  Token t;
  ExpressionNode e = null;
  ExpressionNode e2;
}
{
  e = AdditiveExpression()
  (
    (
      t = "<<"
    | t = ">>"
    | t = ">>>"
    )
    e2 = AdditiveExpression()
    {
      e = new ExpressionNode(t.image, e, e2);
    }
  )*
  {
    return e;
  }
}

ExpressionNode AdditiveExpression() :
{
  Token t;
  ExpressionNode e = null;
  ExpressionNode e2;
}
{
  e = MultiplicativeExpression()
  (
    (
      t = "+"
    | t = "-"
    )
    e2 = MultiplicativeExpression()
    {
      e = new ExpressionNode(t.image, e, e2);
    }
  )*
  {
    return e;
  }
}

ExpressionNode MultiplicativeExpression() :
{
  Token t;
  ExpressionNode e = null;
  ExpressionNode e2 = null;
}
{
  e = UnaryExpression()
  (
    (
      t = "*"
    | t = "/"
    | t = "%"
    )
    e2 = UnaryExpression()
    {
      e = new ExpressionNode(t.image, e, e2);
    }
  )*
  {
    return e;
  }
}


ExpressionNode UnaryExpression() :
{
  Token t = null;
  ExpressionNode e = null;
}
{
  ( (( t="!" | t="~" ) e=UnaryExpression()) | (t="-" e=UnaryExpression())
  | (( t="++" | t="--" ) e=N() ) |( e=N() ( t="++" | t="--" )?)
  )
	{
	    ExpressionNode res =null;
	    if(t == null)
	    	res=new ExpressionNode(null , e);
	    else res=new ExpressionNode(t.image , e);
	    return res;
	}
}

ExpressionNode N() :
{
  Token t;
  ExpressionNode e;
}
{
  (
    e = LiteralExpression()
    {
      return e;
    }
  )
|
  (
    < LP > e = E() < RP >
    {
      return e;
    }
  )
|
  (
    t = < VAR >
    {
      VariableNode v = new VariableNode();
      v.setName(t.image);
      return v;
    }
  )
}

ExpressionNode LiteralExpression() :
{
  ConstantNode e = null;
  Token t = null;
}
{
  (
    t = < INTEGER_LITERAL >
    {
      e = new ConstantNode(Integer.valueOf(t.image));
    }
  | 
    t = < FLOATING_POINT_LITERAL >
    {
      e = new ConstantNode(Double.valueOf(t.image));
    }
  | 
    t = < STRING_LITERAL >
    {
      e = new ConstantNode(t.image);
    }
  | 
    t = < BOOLEAN_LITERAL >
    {
      e = new ConstantNode(Boolean.valueOf(t.image));
    }
  )
  {
    return e;
  }
}




