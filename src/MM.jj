/*
/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+

 */
options
{
  static = true;
}

PARSER_BEGIN(Moaz)
import nodes.*;

public class Moaz
{
  public static void main(String args []) throws ParseException
  {
    Moaz parser = new Moaz(System.in);
    SyntaxTreeNode n = start();
    n.execute(new Context());
  }
}

PARSER_END(Moaz)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
  < PLUS : "+" >
| < SUB : "-" >
| < MULTIPLY : "*" >
| < DIV : "/" >
| < LOG : "log" >
| < SIN : "sin" >
| < COS : "cos" >
| < TAN : "tan" >
| < ABS : "abs" >
| < POWER : "**" >
| < Fact : "!" >
| < LOGICAL :
    "<"
  | ">"
  | "<="
  | ">="
  | "=="
  | "!=" >
| < ASSIGN : "=" >
| < SEMI : ";" >
| < COLON : ":" >
| < IF : "if" >
| < ELSE : "else" >
| < FOR : "for" >
| < ARROW : "->" >
| < WHILE : "while" >
| < READ : ">>" >
| < PRINT :
    "console.log"
  | "print" >
| 
  < VAR_ : "var" >
}

TOKEN :
{
  < LP : "(" >
| < RP : ")" >
| < LB : "{" >
| < RB : "}" >
| < NUM :
    ([ "0"-"9" ])+
    (
      "." ([ "0"-"9" ])+
    )?
    (
      (
        "e"
      | "E"
      )
      (
        "+"
      | "-"
      )?
      ([ "0"-"9" ])+
    )? >
| < VAR :
    (
      [ "a"-"z" ]
    | [ "A"-"Z" ]
    | [ "$" ]
    | [ "_" ]
    )
    (
      [ "a"-"z" ]
    | [ "A"-"Z" ]
    | [ "0"-"9" ]
    | [ "$" ]
    | [ "_" ]
    )* >
}

TOKEN :
{
  < INCR : "++" >
 |  < DECR : "--" >
 |  < PLUSASSIGN : "+=">
 |  <MINUSASSIGN:	"-=">
 |  <MULTASSIGN:	"*=">
 |  <DIVASSIGN:	"/=">
 |  <REMASSIGN:	"%=">

}

BlockNode start() :
{
  BlockNode b;
}
{
  b = block() 
  < COLON >
  {
    return b;
  }
}

BlockNode block() :
{
  BlockNode b = new BlockNode();
  SyntaxTreeNode n = null;
}
{
  (
    (
      n = SingleOP()
    )
    {
      b.addChild(n);
    }
  )+
  {
    return b;
  }
}

SyntaxTreeNode SingleOP() :
{
  SyntaxTreeNode n;
}
{
  (
    n = Declaration()
  | n = forstmt() 
  | n = whilestmt()
  | n = ifstmt()
  | n = printstmt()
  )
  {
    return n;
  }
}

WriteNode printstmt() :
{
  WriteNode res = new WriteNode();
  SyntaxTreeNode n;
}
{
  < PRINT > < LP > n = E() < RP > < SEMI >
  {
    res.addChild(n);
    return res;
  }
}

ConditionNode condition() :
{
  ConditionNode res = new ConditionNode();
  Token t;
  SyntaxTreeNode n1, n2;
}
{
  n1 = E() t = < LOGICAL > n2 = E()
  {
    res.setOperator(t.image);
    res.addChild(n1);
    res.addChild(n2);
    return res;
  }
}
BlockNode Declaration() :
{
	BlockNode b = new BlockNode();
    SyntaxTreeNode n = null;
}
{
    < VAR_ >
    n=Variable()
    {
      b.addChild(n);
    }
    ("," n=Variable()
  	 {
         b.addChild(n);
     }
    )*
    ";"
    {
     return b;
    }
}

AssignNode Variable() :
{
    AssignNode res = new AssignNode();
	Token t;
	SyntaxTreeNode n = null;
}
{
	t=< VAR > ( < ASSIGN > n=E() )?
    {
	    res.setVariable(t.image);
	    res.addChild(n);
	    return res;
    }
}

AssignNode assignstmt() :
{
  AssignNode res = new AssignNode();
  SyntaxTreeNode n;
  Token t;
}
{
  (
  < VAR_ >
  )? 
  t = < VAR > < ASSIGN > n = E() < SEMI >
  {
    res.setVariable(t.image);
    res.addChild(n);
    return res;
  }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////// For statment ////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
ForNode forstmt() :
{
  ForNode res = new ForNode();
  SyntaxTreeNode c1 = null;
  SyntaxTreeNode c2 = null;
  SyntaxTreeNode c3 = null;
  SyntaxTreeNode c4 = null;
}
{
  (
    < FOR >  < LP > c1 = assignstmt() c2 = condition() < SEMI > c3 = E()  < RP >
    {
      res.addChild(c1);
      res.addChild(c2);
      res.addChild(c3);
    }
    (
      < LB > c4 = block() < RB >
    | 
      c4 = SingleOP()
    )
    {
      res.addChild(c4);
    }
  )
  {
    return res;
  }
}
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////// while statment ////////////////////////////////////////
//////////////////////  with one statment after it or multi statment //////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
WhileNode whilestmt() :
{
  WhileNode res = new WhileNode();
  SyntaxTreeNode c = null;
}
{
  (
    < WHILE > < LP > c = condition() < RP >
    {
      res.addChild(c);
    }
    (
      < LB > c = block() < RB >
    | 
      c = SingleOP()
    )
    {
      res.addChild(c);
    }
  )
  {
    return res;
  }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////// if else statment ////////////////////////////////////////
//////////////////////with one statment after it or multi statment //////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
IfNode ifstmt() :
{
  IfNode res = new IfNode();
  SyntaxTreeNode c = null;
}
{
  (
    < IF > < LP > c = condition() < RP >
    {
      res.addChild(c);
    }
    (
      < LB > c = block() < RB >
    | 
      c = SingleOP()
    )
    {
      res.addChild(c);
    }
  )
  (
    < ELSE >
    (
      < LB > c = block() < RB >
    | 
      c = SingleOP()
    )
    {
      res.addChild(c);
    }
  )?
  {
    return res;
  }
}

///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////// Begin mathematical ////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
//ExpressionNode increment():
//{
//  ExpressionNode n1,n2 = null;
//  Token t = null;
//}
//{
//  
//  return n1;
//}


ExpressionNode E() :
{
  ExpressionNode n1, n2 = null;
  Token t = null;
}
{
  n1 = F()
  (
    (
      t = < PLUS >
    | t = < SUB >
    )
    n2 = E()
  )?
  {
    if (t == null) 
    return n1;
    else
    {
      ExpressionNode res = new ExpressionNode();
      res.setOperator(t.image);
      res.addChild(n1);
      res.addChild(n2);
      return res;
    }
  }
}

ExpressionNode F() :
{
  ExpressionNode n1, n2 = null;
  Token t = null;
}
{
  n1 = N()
  (
    (
      t = < MULTIPLY >
    | t = < DIV >
    )
    n2 = F()
  )?
  {
    if (t == null) 
    return n1;
    else
    {
      ExpressionNode res = new ExpressionNode();
      res.setOperator(t.image);
      res.addChild(n1);
      res.addChild(n2);
      return res;
    }
  }
}

ExpressionNode N() :
{
  Token t;
  ExpressionNode e;
}
{
  (
    t = < NUM >
    {
      ConstantNode n = new ConstantNode();
      n.setValue(Double.parseDouble(t.image));
      return n;
    }
  )
|
  (
    < LP > e = E() < RP >
    {
      return e;
    }
  )
|
  (
    t = < VAR >
    {
      VariableNode v = new VariableNode();
      v.setName(t.image);
      return v;
    }
  )
  //  | x = LOG()
  //  | x = SIN()
  //  | x = COS() 
  //  | x = TAN()
  //  | x = ABS()
}
