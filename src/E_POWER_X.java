/* Generated By:JavaCC: Do not edit this line. E_POWER_X.java */
public class E_POWER_X implements E_POWER_XConstants {
  public static void main(String args []) throws ParseException
  {
    E_POWER_X parser = new E_POWER_X(System.in);
    start();
  }

  static final public void start() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
        IF();
        break;
      case DO:
      case While:
        WHILE();
        break;
      case For:
        FOR();
        break;
      case Switch:
        Switch();
        break;
      case Func:
        Fun();
        break;
      case Let:
      case Const:
      case VarName:
        DefinitionVar();
        jj_consume_token(36);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(36);
      if (jj_2_1(2)) {
        ;
      } else {
        break label_1;
      }
    }
  }

  static final public void Switch() throws ParseException {
    jj_consume_token(Switch);
    jj_consume_token(LP);
    jj_consume_token(VarName);
    jj_consume_token(RP);
    jj_consume_token(TP);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      Case();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BREAK:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        Break();
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case _DEFAULT:
      Default();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  static final public void Break() throws ParseException {
    jj_consume_token(BREAK);
  }

  static final public void Continue() throws ParseException {
    jj_consume_token(CONTINUE);
  }

  static final public void Case() throws ParseException {
    jj_consume_token(CASE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      jj_consume_token(NUM);
      break;
    case String:
      jj_consume_token(String);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(TP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LB:
      jj_consume_token(LB);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Let:
        case Const:
        case Func:
        case IF:
        case For:
        case DO:
        case While:
        case Switch:
        case VarName:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_4;
        }
        start();
      }
      jj_consume_token(RB);
      break;
    default:
      jj_la1[7] = jj_gen;
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Let:
        case Const:
        case Func:
        case IF:
        case For:
        case DO:
        case While:
        case Switch:
        case VarName:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_5;
        }
        start();
      }
    }
  }

  static final public void Default() throws ParseException {
    jj_consume_token(_DEFAULT);
    jj_consume_token(TP);
  }

  static final public void FOR() throws ParseException {
    jj_consume_token(For);
    jj_consume_token(LP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Let:
    case Const:
    case VarName:
      DefinitionVar();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    jj_consume_token(36);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
    case Const:
    case VarName:
      Condition();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Logic:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_6;
        }
        jj_consume_token(Logic);
        Condition();
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(36);
    Execute();
    jj_consume_token(RP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LB:
      jj_consume_token(LB);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Let:
        case Const:
        case Func:
        case IF:
        case For:
        case DO:
        case While:
        case Switch:
        case VarName:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_7;
        }
        start();
      }
      jj_consume_token(RB);
      break;
    case Let:
    case Const:
    case Func:
    case IF:
    case For:
    case DO:
    case While:
    case Switch:
    case VarName:
      start();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Execute() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case inc:
    case dec:
    case VarName:
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case inc:
        case dec:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case inc:
          jj_consume_token(inc);
          break;
        case dec:
          jj_consume_token(dec);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(VarName);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case inc:
      case dec:
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case inc:
            jj_consume_token(inc);
            break;
          case dec:
            jj_consume_token(dec);
            break;
          default:
            jj_la1[15] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case inc:
          case dec:
            ;
            break;
          default:
            jj_la1[16] = jj_gen;
            break label_9;
          }
        }
        break;
      case 37:
      case 38:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 37:
          jj_consume_token(37);
          break;
        case 38:
          jj_consume_token(38);
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
          jj_consume_token(NUM);
          break;
        case VarName:
          jj_consume_token(VarName);
          break;
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

  static final public void WHILE() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DO:
      jj_consume_token(DO);
      jj_consume_token(LB);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Let:
        case Const:
        case Func:
        case IF:
        case For:
        case DO:
        case While:
        case Switch:
        case VarName:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_10;
        }
        start();
      }
      jj_consume_token(RB);
      jj_consume_token(While);
      jj_consume_token(LP);
      Condition();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Logic:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_11;
        }
        jj_consume_token(Logic);
        Condition();
      }
      jj_consume_token(RP);
      break;
    case While:
      jj_consume_token(While);
      jj_consume_token(LP);
      Condition();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Logic:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_12;
        }
        jj_consume_token(Logic);
        Condition();
      }
      jj_consume_token(RP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LB:
        jj_consume_token(LB);
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case Let:
          case Const:
          case Func:
          case IF:
          case For:
          case DO:
          case While:
          case Switch:
          case VarName:
            ;
            break;
          default:
            jj_la1[24] = jj_gen;
            break label_13;
          }
          start();
        }
        jj_consume_token(RB);
        break;
      case Let:
      case Const:
      case Func:
      case IF:
      case For:
      case DO:
      case While:
      case Switch:
      case VarName:
        start();
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void IF() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LP);
    Condition();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Logic:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_14;
      }
      jj_consume_token(Logic);
      Condition();
    }
    jj_consume_token(RP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LB:
      jj_consume_token(LB);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Let:
        case Const:
        case Func:
        case IF:
        case For:
        case DO:
        case While:
        case Switch:
        case VarName:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_15;
        }
        start();
      }
      jj_consume_token(RB);
      break;
    case Let:
    case Const:
    case Func:
    case IF:
    case For:
    case DO:
    case While:
    case Switch:
    case VarName:
      start();
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_16:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_16;
      }
      jj_consume_token(ELSEIF);
      jj_consume_token(LP);
      Condition();
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Logic:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_17;
        }
        jj_consume_token(Logic);
        Condition();
      }
      jj_consume_token(RP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LB:
        jj_consume_token(LB);
        label_18:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case Let:
          case Const:
          case Func:
          case IF:
          case For:
          case DO:
          case While:
          case Switch:
          case VarName:
            ;
            break;
          default:
            jj_la1[31] = jj_gen;
            break label_18;
          }
          start();
        }
        jj_consume_token(RB);
        break;
      case Let:
      case Const:
      case Func:
      case IF:
      case For:
      case DO:
      case While:
      case Switch:
      case VarName:
        start();
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    if (jj_2_3(2)) {
      jj_consume_token(ELSE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LB:
        jj_consume_token(LB);
        label_19:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case Let:
          case Const:
          case Func:
          case IF:
          case For:
          case DO:
          case While:
          case Switch:
          case VarName:
            ;
            break;
          default:
            jj_la1[33] = jj_gen;
            break label_19;
          }
          start();
        }
        jj_consume_token(RB);
        break;
      case Let:
      case Const:
      case Func:
      case IF:
      case For:
      case DO:
      case While:
      case Switch:
      case VarName:
        start();
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
  }

  static final public void Condition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VarName:
      jj_consume_token(VarName);
      break;
    case NUM:
      jj_consume_token(NUM);
      break;
    case Const:
      jj_consume_token(Const);
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Condition:
      jj_consume_token(Condition);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VarName:
        jj_consume_token(VarName);
        break;
      case NUM:
        jj_consume_token(NUM);
        break;
      case Const:
        jj_consume_token(Const);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
  }

  static final public void DefinitionVar() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Let:
      jj_consume_token(Let);
      E();
      label_20:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 39:
        case 40:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_20;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 39:
          jj_consume_token(39);
          break;
        case 40:
          jj_consume_token(40);
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        E();
      }
      break;
    case Const:
    case VarName:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Const:
        jj_consume_token(Const);
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
      R();
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 39:
        case 40:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_21;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 39:
          jj_consume_token(39);
          break;
        case 40:
          jj_consume_token(40);
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        R();
      }
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void E() throws ParseException {
    jj_consume_token(VarName);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 41:
      jj_consume_token(41);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        jj_consume_token(NUM);
        break;
      case String:
        jj_consume_token(String);
        break;
      case VarName:
        callFun();
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
  }

  static final public void R() throws ParseException {
    jj_consume_token(VarName);
    jj_consume_token(41);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      jj_consume_token(NUM);
      break;
    case String:
      jj_consume_token(String);
      break;
    case VarName:
      callFun();
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void callFun() throws ParseException {
    jj_consume_token(VarName);
    jj_consume_token(LP);
    first_parmetr_call();
    jj_consume_token(RP);
  }

  static final public void Fun() throws ParseException {
    jj_consume_token(Func);
    jj_consume_token(VarName);
    jj_consume_token(LP);
    first_parmetr();
    jj_consume_token(RP);
    jj_consume_token(LB);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Let:
      case Const:
      case Func:
      case IF:
      case For:
      case DO:
      case While:
      case Switch:
      case VarName:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_22;
      }
      start();
    }
    jj_consume_token(Return);
    return_var();
    jj_consume_token(36);
    jj_consume_token(RB);
  }

  static final public void parmetr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 39:
    case 40:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
        jj_consume_token(40);
        break;
      case 39:
        jj_consume_token(39);
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(VarName);
      parmetr();
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
  }

  static final public void parmetr_call() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 39:
    case 40:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 40:
        jj_consume_token(40);
        break;
      case 39:
        jj_consume_token(39);
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_4(2)) {
        callFun();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VarName:
          jj_consume_token(VarName);
          break;
        case String:
          jj_consume_token(String);
          break;
        case NUM:
          jj_consume_token(NUM);
          break;
        default:
          jj_la1[51] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      parmetr_call();
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
  }

  static final public void first_parmetr_call() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
    case VarName:
    case String:
      if (jj_2_5(2)) {
        callFun();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VarName:
          jj_consume_token(VarName);
          break;
        case String:
          jj_consume_token(String);
          break;
        case NUM:
          jj_consume_token(NUM);
          break;
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      parmetr_call();
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
  }

  static final public void first_parmetr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VarName:
      jj_consume_token(VarName);
      parmetr();
      break;
    default:
      jj_la1[55] = jj_gen;
      ;
    }
  }

  static final public void return_var() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      jj_consume_token(NUM);
      break;
    case String:
      jj_consume_token(String);
      break;
    case VarName:
      jj_consume_token(VarName);
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_23:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_23;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      return_var();
    }
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_3R_43() {
    if (jj_scan_token(Let)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(Switch)) return true;
    if (jj_scan_token(LP)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(LB)) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(For)) return true;
    if (jj_scan_token(LP)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(Func)) return true;
    if (jj_scan_token(VarName)) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    Token xsp;
    if (jj_3_1()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_scan_token(ELSE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(ELSEIF)) return true;
    if (jj_scan_token(LP)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(VarName)) return true;
    if (jj_scan_token(LP)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LP)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(VarName)) return true;
    if (jj_scan_token(41)) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(While)) return true;
    if (jj_scan_token(LP)) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(VarName)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(DO)) return true;
    if (jj_scan_token(LB)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  static private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public E_POWER_XTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[58];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3ccc0,0x100000,0x200000,0x80000,0x20,0x3ccc0,0x3ccc0,0x4000000,0xc0,0x800000,0xa0,0x3ccc0,0x403ccc0,0x80000000,0x80000000,0x80000000,0x80000000,0x0,0x20,0x80000000,0x80000000,0x3ccc0,0x800000,0x800000,0x3ccc0,0x403ccc0,0x18000,0x800000,0x3ccc0,0x403ccc0,0x800000,0x3ccc0,0x403ccc0,0x3ccc0,0x403ccc0,0xa0,0xa0,0x400000,0x0,0x0,0x80,0x0,0x0,0xc0,0x20,0x0,0x20,0x3ccc0,0x0,0x0,0x0,0x20,0x0,0x20,0x20,0x0,0x20,0x60000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4,0x0,0x0,0x0,0x8,0x4,0x4,0x0,0x4,0x0,0x4,0x4,0x4,0x1,0x1,0x1,0x1,0x60,0x4,0x61,0x5,0x4,0x0,0x0,0x4,0x4,0x0,0x0,0x4,0x4,0x0,0x4,0x4,0x4,0x4,0x4,0x4,0x0,0x180,0x180,0x0,0x180,0x180,0x4,0xc,0x200,0xc,0x4,0x180,0x180,0x180,0xc,0x180,0xc,0xc,0x4,0xc,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[6];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public E_POWER_X(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public E_POWER_X(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new E_POWER_XTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public E_POWER_X(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new E_POWER_XTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public E_POWER_X(E_POWER_XTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(E_POWER_XTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 58; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[42];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 58; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 42; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
