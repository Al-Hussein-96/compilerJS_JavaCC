/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}
 
PARSER_BEGIN(E_POWER_X)
public class E_POWER_X
{
  public static void main(String args []) throws ParseException
  {
    E_POWER_X parser = new E_POWER_X(System.in);
    start();
  }
}
 
PARSER_END(E_POWER_X)
 
SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}
 
TOKEN :
{
  < NUM :([ "0"-"9" ])+("." ([ "0"-"9" ])+)?(("e"| "E")("+"| "-")?([ "0"-"9" ])+)? >
| < Let : "let" >
| < Const : "const" >
| < SQ : "'" >
| < DQ : "\"" >
| < Func :"function" >
| < IF :"if" >
| < ELSE :"else" >
| < ELSEIF :"elseif" >
| < For :"for" >
| < DO :"do" >
| < While :"while" >
| < Switch : "switch">
| < CONTINUE : "continue" >
| < _DEFAULT : "default" >
| < CASE :	"case">
| < BREAK:	"break">

| < Condition : ">" | "<" | "==" |"!=" | ">=" | "<=" >
| < Logic : "&&" | "||" >
| < LP : "(" >
| < RP : ")" >
| < LB : "{" >
| < RB : "}" >
| < TP : ":" >
| < PLUS  : "+">
| < MINUS  : "-">
| < inc : "++" >
| < dec : "--" >
| < Return : "return" >
| < VarName : (["a"-"z"]|["A"-"Z"]|["$"]|["_"]) (["a"-"z"]|["A"-"Z"]|["0"-"9"]|["$"]|["_"])* >
| < String : "\""(["a"-"z"]|["A"-"Z"]|["0"-"9"]|"$"|"_" |" "| "-"|"+"|"'"|"!"|"@"|"#"|"%"|"^"|"&"|"*"|"("|")" |"\"")+ "\"">
 
 
 
}
void start() :
{
}
{
  (
    LOOKAHEAD(2)
    (
	    IF()
	  | WHILE()
	  | FOR()
	  | Switch()
	  | Fun()
	  | DefinitionVar()";"
	  )
	  ";"
	)+
}

void Switch():
{
}
{
  < Switch > < LP > < VarName > < RP > < TP >
  		(
  		  Case()
  		  (  		    Break() )*  		  
  		)*
  		(
  		   Default()  		    
  		 )?
}

void Break(): { }
{
  < BREAK > 
}

void Continue(): { }
{
  < CONTINUE > 
}

void Case():
{
}
{
  < CASE > (< NUM > | < String >) < TP >  ((< LB > (start())* < RB >) | (start())*)
}
void Default(): { }
{
  < _DEFAULT > < TP >
}



 
void FOR():
{
}
{
  < For > <LP > (DefinitionVar())? ";"(Condition()( < Logic > Condition())*)?";"Execute() < RP >
  	  ((< LB >(start())* < RB >) | start())
}
void Execute():
{
}
{
  ((< inc >|< dec >)* < VarName > ((< inc >|< dec >)+ | (("+="|"-=") (< NUM >|< VarName >))))?
} 
void WHILE():
{
}
{
  (
	  < DO > (< LB >(start())* < RB >)
	  < While >< LP > Condition()( < Logic > Condition())* < RP >
  )
| (
	  < While >< LP > Condition()( < Logic > Condition())* < RP >
  	  ((< LB >(start())* < RB >) | start())
  )
 
}
void IF():
{
}
{
  < IF > < LP > Condition()( < Logic > Condition())* < RP > 
	 ((< LB >(start())* < RB >) | start())
  (
    LOOKAHEAD(2)
	  < ELSEIF > < LP > Condition()( < Logic > Condition())* < RP > 
		 ((< LB >(start())* < RB >) | start())
  )*
  (
    LOOKAHEAD(2)
	  < ELSE >
		 ((< LB >(start())* < RB >) | start())
  )?
 
}
 
void Condition():
{
}
{
 	(< VarName > | < NUM > | < Const >) (< Condition > (< VarName > | < NUM > | < Const >))?
}


 
void DefinitionVar() :
{
}
{
   < Let >  E() ( (","|", ") E())*
   | (< Const >)?  R() ((","|", ") R())*
}
void E() :
{
}
{
  < VarName > ("=" (< NUM >  | < String > |callFun()))?
}
 
void R() :
{
}
{
  < VarName > ("=" (< NUM >  | < String >|callFun()))
}
 
void callFun() : 
{
}
{
   < VarName>  < LP > first_parmetr_call() < RP > 
}
 
void Fun() : 
{
}
{
    < Func > < VarName>  < LP > first_parmetr() < RP > 
 
    < LB > 
    ( start())*
 
    < Return > return_var() ";"
 
    < RB > 
 
}
void parmetr() : 
{
}
{
	( (", "|",") < VarName >  parmetr())?
}
 
void parmetr_call() : 
{
}
{
	( (", "|",") (LOOKAHEAD(2)  callFun() |< VarName > | <  String >  | <  NUM >  )  parmetr_call())?
}
void first_parmetr_call() : 
{
}
{
	((LOOKAHEAD(2)  callFun() |< VarName > | <  String >  | <  NUM >  )  parmetr_call())?
}
void first_parmetr() : 
{
}
{
	(< VarName >  parmetr())?
}
void return_var() : 
{   
}
{
	(< NUM > | < String >  | < VarName > ) (
    LOOKAHEAD(2)
	   (< PLUS > | < MINUS >) return_var())*
}